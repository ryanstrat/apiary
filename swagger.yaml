swagger: '2.0'
info:
  version: ''
  title: MyRoboJackets
  description: |-
    Welcome to the MyRoboJackets API reference.

    The MyRoboJackets API is organized around the REST mothodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors. All requests are authenticated using an API token which can be created upon request in #it-helpdesk (Slack).
host: my.robojackets.org
basePath: /api/v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Authorization:
    name: Authorization
    type: apiKey
    in: header
    description: |-
      Bearer token generated upon request in #it-helpdesk (Slack).
      Ex. `Authorization: Bearer abcdefg12345`
paths:
  '/dues/packages/{id}':
    parameters:
      - name: id
        in: path
        required: true
        type: string
    get:
      operationId: GET-dues-package
      summary: Get Dues Package
      tags:
        - Dues Packages
      description: |-
        **Permissions**  
        Requires `read-dues-packages` permission.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DuesPackage'
          examples:
            application/json:
              id: nisi sed aliqua nostrud pariatur
              created_at: '2529-05-21T13:35:34.199Z'
              updated_at: '2120-01-30T00:08:36.816Z'
              deleted_at: '4713-09-27T09:06:19.510Z'
              name: consectetur quis tempor dolore
              eligible_for_shirt: true
              eligible_for_polo: false
              effective_start: '2917-03-21T01:32:50.104Z'
              effective_end: '4457-04-13T04:10:48.441Z'
              cost: -953041
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    put:
      operationId: PUT-dues-package
      summary: Update Dues Package
      tags:
        - Dues Packages
      description: |-
        **Permissions**  
        Requires `update-dues-packages` permission.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/DuesPackage-Input'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DuesPackage'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    delete:
      operationId: DELETE-dues-package
      summary: Delete Dues Package
      tags:
        - Dues Packages
      description: |-
        **Permissions**  
        Requires `delete-dues-packages` permission.
      responses:
        '204':
          description: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  /dues/packages:
    get:
      operationId: LIST-dues-packages
      summary: List Dues packages
      tags:
        - Dues Packages
      description: |-
        **Permissions**  
        Requires `read-dues-packages` permission.
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/DuesPackage'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    post:
      operationId: POST-dues-package
      summary: Create Dues Package
      tags:
        - Dues Packages
      description: |-
        **Permissions**  
        Requires `create-dues-packages` permission.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/DuesPackage-Input'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/DuesPackage'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  '/dues/transactions/{id}':
    parameters:
      - name: id
        in: path
        required: true
        type: string
    get:
      operationId: GET-duestransaction
      summary: Get DuesTransaction
      tags:
        - Dues Transactions
      description: |-
        **Permissions**  
        Requires `read-dues-transactions` or `read-dues-transactions-own` permission. If only `-own` permission is assigned, the requesting user will only be able to view the model(s) pertaining to their user.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DuesTransaction'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    put:
      operationId: PUT-duestransaction
      summary: Update DuesTransaction
      tags:
        - Dues Transactions
      description: |-
        **Permissions**  
        Requires `update-dues-transactions` permission.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/DuesTransaction-Input'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DuesTransaction'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    delete:
      operationId: DELETE-duestransaction
      summary: Delete DuesTransaction
      tags:
        - Dues Transactions
      description: |-
        **Permissions**  
        Requires `delete-dues-transactions` permission.
      responses:
        '204':
          description: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  /dues/transactions:
    get:
      operationId: LIST-duestransactions
      summary: List Duestransactions
      tags:
        - Dues Transactions
      description: |-
        **Permissions**  
        Requires `read-dues-transactions` permission.
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/DuesTransaction'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    post:
      operationId: POST-duestransaction
      summary: Create DuesTransaction
      tags:
        - Dues Transactions
      description: |-
        **Permissions**  
        Requires `create-dues-transactions` or `create-dues-transactions-own` permissions.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/DuesTransaction-Input'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/DuesTransaction'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  '/events/{id}':
    parameters:
      - name: id
        in: path
        required: true
        type: string
    get:
      operationId: GET-event
      summary: Get Event
      tags:
        - Events
      description: |-
        **Permissions**  
        Requires `read-events` permission.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Event'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    put:
      operationId: PUT-event
      summary: Update Event
      tags:
        - Events
      description: |-
        **Permissions**  
        Requires `update-events` or `update-events-own` permission. If only `-own` permission is assigned, the requesting user will only be able to update the model(s) pertaining to their user.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Event-Input'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Event'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    delete:
      operationId: DELETE-event
      summary: Delete Event
      tags:
        - Events
      description: |-
        **Permissions**  
        Requires `delete-events` permission.
      responses:
        '204':
          description: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  /events:
    get:
      operationId: LIST-events
      summary: List Events
      tags:
        - Events
      description: |-
        **Permissions**  
        Requires `read-events` permission.
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    post:
      operationId: POST-event
      summary: Create Event
      tags:
        - Events
      description: |-
        **Permissions**  
        Requires `create-events` permission.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Event-Input'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Event'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  '/payments/{id}':
    parameters:
      - name: id
        in: path
        required: true
        type: string
    get:
      operationId: GET-payment
      summary: Get Payment
      tags:
        - Payments
      description: |-
        **Permissions**  
        Requires `read-payments` or `read-payments-own` permission. If only `-own` permission is assigned, the requesting user will only be able to access the model(s) pertaining to their user.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    put:
      operationId: PUT-payment
      summary: Update Payment
      tags:
        - Payments
      description: |-
        **Permissions**  
        Requires `update-payments` permission.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Payment-Input'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    delete:
      operationId: DELETE-payment
      summary: Delete Payment
      tags:
        - Payments
      description: |-
        **Permissions**  
        Requires `delete-payments` permission.
      responses:
        '204':
          description: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  /payments:
    get:
      operationId: LIST-payments
      summary: List Payments
      tags:
        - Payments
      description: |-
        **Permissions**  
        Requires `read-payments` permission.
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    post:
      operationId: POST-payment
      summary: Create Payment
      tags:
        - Payments
      description: |-
        **Permissions**  
        Requires `create-payments` or `create-payments-own` permission. If only `-own` permission is assigned, the requesting user will only be able to access the model(s) pertaining to their user.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Payment-Input'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Payment'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  '/permissions/{id}':
    parameters:
      - name: id
        in: path
        required: true
        type: string
    get:
      operationId: GET-permissions
      summary: Get Permissions
      tags:
        - Permissions
      description: |-
        **Permissions**  
        Requires `admin` role.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    put:
      operationId: PUT-permissions
      summary: Update Permissions
      tags:
        - Permissions
      description: |-
        **Permissions**  
        Requires `admin` role.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Permission-Input'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    delete:
      operationId: DELETE-permissions
      summary: Delete Permissions
      tags:
        - Permissions
      description: |-
        **Permissions**  
        Requires `admin` role.
      responses:
        '204':
          description: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  /permissions:
    get:
      operationId: LIST-permissions
      summary: List Permissions
      tags:
        - Permissions
      description: |-
        **Permissions**  
        Requires `admin` role.
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Permission'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    post:
      operationId: POST-permissions
      summary: Create Permissions
      tags:
        - Permissions
      description: |-
        **Permissions**  
        Requires `admin` role.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Permission-Input'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Permission'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  '/roles/{id}':
    parameters:
      - name: id
        in: path
        required: true
        type: string
    get:
      operationId: GET-roles
      summary: Get Roles
      tags:
        - Roles
      description: |-
        **Permissions**  
        Requires `admin` role.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Role'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    put:
      operationId: PUT-roles
      summary: Update Roles
      tags:
        - Roles
      description: |-
        **Permissions**  
        Requires `admin` role.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Roles-Input'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Role'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    delete:
      operationId: DELETE-roles
      summary: Delete Roles
      tags:
        - Roles
      description: |-
        **Permissions**  
        Requires `admin` role.
      responses:
        '204':
          description: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  /roles:
    get:
      operationId: LIST-roles
      summary: List Roles
      tags:
        - Roles
      description: |-
        **Permissions**  
        Requires `admin` role.
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    post:
      operationId: POST-roles
      summary: Create Roles
      tags:
        - Roles
      description: |-
        **Permissions**  
        Requires `admin` role.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Roles-Input'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Role'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  '/teams/{id}':
    parameters:
      - name: id
        in: path
        required: true
        type: string
    get:
      operationId: GET-team
      summary: Get Team
      tags:
        - Teams
      description: |-
        **Permissions**  
        Requires `read-teams` permission.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Team'
          examples:
            application/json:
              id: 42246573
              created_at: '3706-04-13T21:28:06.223Z'
              updated_at: '3308-12-30T05:50:47.741Z'
              deleted_at: '2946-02-15T08:28:24.547Z'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    put:
      operationId: PUT-team
      summary: Update Team
      tags:
        - Teams
      description: |-
        **Permissions**  
        Requires `update-teams` permission.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Team-Input'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Team'
          examples:
            application/json:
              id: 42246573
              created_at: '3706-04-13T21:28:06.223Z'
              updated_at: '3308-12-30T05:50:47.741Z'
              deleted_at: '2946-02-15T08:28:24.547Z'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    delete:
      operationId: DELETE-team
      summary: Delete Team
      tags:
        - Teams
      description: |-
        **Permissions**  
        Requires `delete-teams` permission.
      responses:
        '204':
          description: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  /teams:
    get:
      operationId: LIST-teams
      summary: List Teams
      tags:
        - Teams
      description: |-
        **Permissions**  
        Requires `read-teams` permission.
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
          examples:
            application/json:
              - id: 42246573
                created_at: '3706-04-13T21:28:06.223Z'
                updated_at: '3308-12-30T05:50:47.741Z'
                deleted_at: '2946-02-15T08:28:24.547Z'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    post:
      operationId: POST-team
      summary: Create Team
      tags:
        - Teams
      description: |-
        **Permissions**  
        Requires `create-teams` permission.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Team-Input'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Team'
          examples:
            application/json:
              id: 42246573
              created_at: '3706-04-13T21:28:06.223Z'
              updated_at: '3308-12-30T05:50:47.741Z'
              deleted_at: '2946-02-15T08:28:24.547Z'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  '/users/{id}':
    parameters:
      - name: id
        in: path
        description: 'id, uid, or gtid'
        required: true
        type: string
    get:
      operationId: GET-user
      summary: Get User
      tags:
        - Users
      description: |-
        **Permissions**  
        Requires `read-users` or `read-users-own` permission. If only `-own` permission is assigned, the requesting user will only be able to view the model(s) pertaining to their user.

        **Related Model Inclusion**  
        Related model data may be dynamically included by utilizing the `include` parameter with one or more comma-separated values listed in the table below. For example, to include both related RSVPs and Attendance, use `include=rsvp,attendance`. Note that the requesting user must have appropriate permissions to view related data as outlined below.

        | **Model**        | **Permissions**                                | **Value**  |
        |------------------|----------------------------------------------------|------------------|
        | FasetVisit       | read-faset-visits, read-faset-visits-own           | fasetVisits      |
        | Team             | read-teams, read-teams-own                         | teams            |
        | DuesTransactions | read-dues-transactions, read-dues-transactions-own | duestransactions |
        | Event            | read-events                                        | events           |
        | RSVP             | read-rsvps, read-rsvps-own                         | rsvps            |
        | Attendance       | read-attendance, read-attendance-own               | attendance       |
        | Payment          | read-payments, read-payments-own                   | payments         |
      responses:
        '200':
          description: ''
          schema:
            allOf:
              - $ref: '#/definitions/User'
              - $ref: '#/definitions/user-input'
          examples:
            application/json:
              status: success
              user:
                id: 1
                uid: gburdell3
                gtid: 902900001
                gt_email: gburdell3@gatech.edu
                personal_email: georgep@gmail.com
                first_name: George
                middle_name: P
                last_name: Burdell
                preferred_name: ''
                name: George Burdell
                full_name: George P Burdell
                phone: 4042060005
                emergency_contact_name: Mom Burdell
                emergency_contact_phone: 6785550009
                join_semester: 201708
                graduation_semester: ''
                shirt_size: L
                polo_size: M
                api_token: ''
                accept_safety_agreement: '2017-10-11 12:05:01'
                is_active: true
                created_at: '2017-01-01 13:00:01'
                updated_at: '2017-12-12 08:22:55'
                deleted_at: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    put:
      operationId: PUT-user
      summary: Update User
      tags:
        - Users
      description: |-
        **Permissions**  
        Requires `update-users` or `update-users-own` permission. If only `-own` permission is assigned, the requesting user will only be able to update the model(s) pertaining to their user.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/user-input'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    delete:
      operationId: DELETE-user
      summary: Delete User
      tags:
        - Users
      description: |-
        **Permissions**  
        Requires `delete-users` permission
      responses:
        '204':
          description: ''
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
  /users:
    get:
      operationId: LIST-users
      summary: List Users
      tags:
        - Users
      description: |-
        **Permissions**  
        Requires `read-users` permission.
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
    post:
      operationId: POST-user
      summary: Create User
      tags:
        - Users
      description: |-
        **Permissions**  
        Requires `create-users` permission.
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/user-input'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/trait:standardErrors:401'
        '403':
          $ref: '#/responses/trait:standardErrors:403'
        '404':
          $ref: '#/responses/trait:standardErrors:404'
        '500':
          $ref: '#/responses/trait:standardErrors:500'
      security:
        - Authorization: []
responses:
  'trait:standardErrors:401':
    description: ''
    schema:
      type: object
      properties:
        status:
          type: string
          description: Request Status
        error:
          type: string
          description: Error Message
      required:
        - status
        - error
  'trait:standardErrors:403':
    description: ''
    schema:
      type: object
      properties:
        status:
          type: string
          description: Request Status
        error:
          type: string
          description: Error Message
      required:
        - status
        - error
  'trait:standardErrors:404':
    description: ''
    schema:
      type: object
      properties:
        status:
          type: string
          description: Request Status
        error:
          type: string
          description: Error Message
      required:
        - status
        - error
  'trait:standardErrors:500':
    description: ''
    schema:
      type: object
      properties:
        status:
          type: string
          description: Request Status
        error:
          type: string
          description: Error Message
      required:
        - status
        - error
definitions:
  user-input:
    title: User (Input)
    type: object
    properties:
      uid:
        type: string
        description: GT Account Username
        maxLength: 127
      gtid:
        type: number
        maximum: 9
        description: GTID Number
      gt_email:
        type: string
        description: GT Email Address
        maxLength: 255
        format: email
      personal_email:
        type: string
        maxLength: 255
        format: email
        description: Personal Email Address
      first_name:
        type: string
        description: First Name
        maxLength: 127
      middle_name:
        type: string
        description: Middle Name
        maxLength: 127
      last_name:
        type: string
        description: Last Name
        maxLength: 127
      preferred_name:
        type: string
        maxLength: 127
        description: Preferred Name (if different from First Name)
      phone:
        type: number
        description: Phone Number
        maximum: 15
      emergency_contact_name:
        type: string
        description: Emergency Contact First/Last Name
        maxLength: 255
      emergency_contact_phone:
        type: number
        description: Emergency Contact Phone Number
        maximum: 15
      join_semester:
        type: number
        description: Semester Joined (YYYYMM)
      graduation_semestser:
        type: number
        description: Semester Graduated (YYYYMM)
      shirt_size:
        type: string
        description: T-Shirt Size
        enum:
          - s
          - m
          - l
          - xl
          - xxl
          - xxxl
      polo_size:
        type: string
        enum:
          - s
          - m
          - l
          - xl
          - xxl
          - xxxl
        description: Polo Shirt Size
      accept_safety_agreement:
        type: string
        description: Date user accepted safety agreement
        format: date
    required:
      - uid
      - gtid
      - gt_email
      - first_name
      - last_name
  Team-Input:
    title: Team (Input)
    type: object
    properties:
      name:
        type: string
        description: Team Name
        maxLength: 64
      description:
        type: string
        maxLength: 255
        description: Description
      founding_semester:
        type: number
        description: Founding Semester (YYYYMM)
    required:
      - name
  Team:
    title: Team
    allOf:
      - type: object
        properties:
          id:
            type: integer
          created_at:
            type: string
            format: date-time
            description: Timestamp of model's creation
          updated_at:
            type: string
            format: date-time
            description: Timestamp of model's last update
          deleted_at:
            type: string
            format: date-time
            default: ''
            description: Timestamp of model's deletion - Null if model is not deleted.
        required:
          - created_at
          - updated_at
      - $ref: '#/definitions/Team-Input'
    example:
      id: 42246573
      created_at: '3706-04-13T21:28:06.223Z'
      updated_at: '3308-12-30T05:50:47.741Z'
      deleted_at: '2946-02-15T08:28:24.547Z'
  Team-Collection:
    title: Team Collection
    type: object
    properties:
      '0':
        $ref: '#/definitions/Team'
      '1':
        $ref: '#/definitions/Team'
    example:
      '0':
        name: pariatur occaecat esse quis sed
        description: consectetur
        deleted_at: '2688-03-17T00:24:36.777Z'
  DuesTransaction-Input:
    title: Dues Transaction (Input)
    type: object
    properties:
      received_polo:
        type: boolean
      received_shirt:
        type: boolean
      dues_package_id:
        type: integer
      payment_id:
        type: integer
      user_id:
        type: integer
        description: User to whom the transaction belongs
    required:
      - dues_package_id
      - user_id
  DuesTransaction:
    title: Dues Transaction
    allOf:
      - type: object
        properties:
          id:
            type: integer
          created_at:
            type: string
            format: date-time
            description: Timestamp of model's creation
          updated_at:
            type: string
            format: date-time
            description: Timestamp of model's last update
          deleted_at:
            type: string
            format: date-time
            default: ''
            description: Timestamp of model's deletion - Null if model is not deleted.
        required:
          - id
          - created_at
          - updated_at
          - deleted_at
      - $ref: '#/definitions/DuesTransaction-Input'
  DuesPackage-Input:
    title: DuesPackage (Input)
    type: object
    properties:
      name:
        type: string
        description: User-facing name of Dues Package
      eligible_for_shirt:
        type: boolean
      eligible_for_polo:
        type: boolean
      effective_start:
        type: string
        format: date-time
        description: Date package starts being 'active'
      effective_end:
        type: string
        format: date-time
        description: Date package ends being 'active'
      cost:
        type: number
        description: 'Cost, in USD, of the DuesPackage'
    required:
      - name
      - eligible_for_shirt
      - eligible_for_polo
      - effective_start
      - effective_end
      - cost
  DuesPackage:
    title: DuesPackage
    allOf:
      - type: object
        properties:
          id:
            type: string
          created_at:
            type: string
            format: date-time
            description: Timestamp of model's creation
          updated_at:
            type: string
            format: date-time
            description: Timestamp of model's last update
          deleted_at:
            type: string
            format: date-time
            default: ''
            description: Timestamp of model's deletion - Null if model is not deleted.
        required:
          - id
          - created_at
          - updated_at
          - deleted_at
      - $ref: '#/definitions/DuesPackage-Input'
  Event-Input:
    title: Event (Input)
    type: object
    properties:
      name:
        type: string
      price:
        type: number
        description: 'Price, in USD'
      allow_anonymous_rsvp:
        type: boolean
        description: Allow RSVP without login
      location:
        type: string
        description: ''
      start_time:
        type: string
        format: date-time
      end_time:
        type: string
        format: date-time
      organizer:
        type: integer
        description: User organizing the event
        default: Requesting user
    required:
      - name
      - allow_anonymous_rsvp
  Event:
    title: Event
    allOf:
      - type: object
        properties:
          id:
            type: integer
          created_at:
            type: string
            format: date-time
            description: Timestamp of model's creation
          updated_at:
            type: string
            format: date-time
            description: Timestamp of model's last update
          deleted_at:
            type: string
            format: date-time
            default: ''
            description: Timestamp of model's deletion - Null if model is not deleted.
        required:
          - id
          - created_at
          - updated_at
      - $ref: '#/definitions/Event-Input'
  Payment-Input:
    title: Payment (Input)
    type: object
    properties:
      amount:
        type: number
        description: 'Amount to be paid, in USD'
      method:
        type: string
        description: 'Payment Method (Ex. Square, Cash)'
      recorded_by:
        type: integer
        description: User Accepting Payment
        default: Current User
      payable_type:
        type: string
        description: 'Payable Model Type (Ex. App\Event, App\DuesTransaction)'
      payable_id:
        type: integer
        description: ID of Payable Model
    required:
      - amount
      - method
      - payable_type
      - payable_id
  Payment:
    title: Payment
    allOf:
      - type: object
        properties:
          id:
            type: integer
          created_at:
            type: string
            format: date-time
            description: Timestamp of model's creation
          updated_at:
            type: string
            format: date-time
            description: Timestamp of model's last update
          deleted_at:
            type: string
            format: date-time
            default: ''
            description: Timestamp of model's deletion - Null if model is not deleted.
        required:
          - id
          - created_at
          - updated_at
      - $ref: '#/definitions/Payment-Input'
  Permission-Input:
    title: Permission (Input)
    type: object
    properties:
      name:
        type: string
      roles:
        type: array
        description: Roles to be granted this permission; Accepts ID or Model instance
        items: {}
    required:
      - name
  Permission:
    title: Permission
    allOf:
      - type: object
        properties:
          id:
            type: string
          created_at:
            type: string
            format: date-time
            description: Timestamp of model's creation
          updated_at:
            type: string
            format: date-time
            description: Timestamp of model's last update
        required:
          - id
          - created_at
          - updated_at
      - $ref: '#/definitions/Permission-Input'
  Roles-Input:
    title: Role (Input)
    type: object
    properties:
      name:
        type: string
      permissions:
        type: array
        description: Permissions to be granted to this role
        items: {}
    required:
      - name
  Role:
    title: Role
    allOf:
      - type: object
        properties:
          id:
            type: string
          created_at:
            type: string
            format: date-time
            description: Timestamp of model's creation
          updated_at:
            type: string
            format: date-time
            description: Timestamp of model's last update
        required:
          - id
          - created_at
          - updated_at
      - $ref: '#/definitions/Roles-Input'
  User:
    title: User
    allOf:
      - type: object
        properties:
          id:
            type: integer
          created_at:
            type: string
            format: date-time
            description: Timestamp of model's creation
          updated_at:
            type: string
            format: date-time
            description: Timestamp of model's last update
          deleted_at:
            type: string
            format: date-time
            default: ''
            description: Timestamp of model's deletion - Null if model is not deleted.
          name:
            type: string
            description: Concatenation of `first_name` or `preferred_name` (if set) and `last_name`
          full_name:
            type: string
            description: 'Concatenation of `first_name`, `middle_name` (if set), and `last_name`'
          is_active:
            type: boolean
            description: User meets all requirements to be considered 'active' (programmatically determined)
          api_token:
            type: string
        required:
          - id
          - created_at
          - updated_at
          - name
          - full_name
          - is_active
          - api_token
      - $ref: '#/definitions/user-input'
    example:
      id: 1
      uid: gburdell3
      gtid: 902900001
      gt_email: gburdell3@gatech.edu
      personal_email: georgep@gmail.com
      first_name: George
      middle_name: P
      last_name: Burdell
      preferred_name: ''
      name: George Burdell
      full_name: George P Burdell
      phone: 4042060005
      emergency_contact_name: Mom Burdell
      emergency_contact_phone: 6785550009
      join_semester: 201708
      graduation_semester: ''
      shirt_size: L
      polo_size: M
      api_token: ''
      accept_safety_agreement: '2017-10-11 12:05:01'
      is_active: true
      created_at: '2017-01-01 13:00:01'
      updated_at: '2017-12-12 08:22:55'
      deleted_at: ''